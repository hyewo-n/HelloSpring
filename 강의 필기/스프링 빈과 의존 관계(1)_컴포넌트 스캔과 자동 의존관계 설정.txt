> 스프링 빈과 의존 관계 - 컴포넌트 스캔과 자동 의존관계 설정

멤버 서비스랑 리포지토리를 만들고 멤버 객체도 만들고
서비스를 동해서 멤버에 가입하고 리포지토리에 저장이 되고
또 리포지토리에서 꺼내올 수 있다.

이제 화면을 붙이고 싶다!
그럼 컨트롤러랑 뷰 템플릿이 필요함

멤버 컨트롤러가 멤버 서비스를 통해서 회원가입을 하고 데이터를 조회할 수 있어야 함
 -> 이렇게 되는 것을 서로 의존관계가 있다고 표현함
 -> 멤버 컨트롤러가 멤버 서비스를 의존한다

# controller 패키지 아래에 MemberController 클래스를 만듦

# 기능은 없어도 @Controller가 노테이션 되어있으면
   스프링 컨테이너에 MemberController 객체를 생성해서 스프링에 넣어두고
   스프링이 관리하게 됨

스프링이 관리를 하게 되면 다 스프링 컨테이너에 등록을 하고 컨테이너에서 받아서 사용하도록 바뀐다
그런데 new를 이용해서 객체를 생성하게 되면 MemberContorller가 아닌 다른 Controller들도 MemberService 객체를 가져다가 사용할 수 있다

이제는 스프링 컨테이너에 등록을 하고 사용하면 됨!
그러면 딱 하나만 등록이 된다.

생성자를 만들어주고 @Autowired를 걸어줌
그러면 memberService를 스프링리 스프링 컨테이너에 있는 memberService와 연결시켜줌

처음에는 memberService가 생성이 되어있지 않아서 오류가 남
처음에는 순수한 자바 class이므로 스프링이 알 수가 없음
그래서 MemberService 클래스에 @Service를 넣어준다
그러면 스프링이 알아서 인식하고 컨테이너에 등록해줌

@를 붙여서 하는 것이 컴포넌트 스캔 방식
원래 @Component으로 하는데
우리는 @Service 등으로 사용했는왜 왜 컴포넌트 방식?
@Service에 들어가보면 그 안에 @Component가 노테이션 되어 있다

컴포넌트 관련된 애노테이션이 있으면
스프링이 객체를 하나씩 생성해서 컨테이너에 등록해주고
@Autowired는 연관관계, 사용할 수 있도록 선을 연결해줌

그럼 아무데다 @Component를 붙이면 실행되나?
 - 그건 아님

@SpringBootApplication이 등록된 클래스에서부터 시작하고
그 클래스 패키지의 하위 패키지만 자동 등록이 된다
