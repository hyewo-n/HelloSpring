> 스프링 웹 개발 기초 - API

@ResponseBody 
 - html의 Body 태그 아님
 - http의 Body부에 이 데이터를 내가 직접 넣어주겠다는 의미
 - 웹 페이지에서 '소스 보기'로 코드를 보면 html 태그 없이 깔끔하게
    입력된 값만 있음

# API를 많이 사용하는 이유 - 문자가 아니라 데이터를 내놔! 라고 할 때

# @ResponseBody 사용 원리
 - 웹브라우저에서 localhost:8080/hello-api 검색
 - 톰캣 내장 서버에서 hello-api가 왔다고 spring한테 던짐
 - spring이 찾아보니 @ResponseBody가 붙어있으면 http 응답에 그대로 데이터를 넘겨야되겠구나 라고 동작함
 - 근데 보니 문자가 아니라 객체다?
   문자면 그냥 그 값 그대로 http에 넘겨주면 끝
   그런데 객체이면? default 방법은 json 방식으로 데이터를 만들어서 http 응답에 반환한다
 - hello 객체를 넘기면 HttpMessageConverter가 동작을 한다
   단순 문자이면 StringConverter가 동작,
   객체이면 JsonConverter가 동작
 - 객체를 JSON 스타일로 바꿔서 요청한 웹브라우저에 보내줌


> 회원관리 예제 - 백엔드 개발 - 비즈니스 요구사항 정리

# 일반적인 웹 애플리케이션 계층 구조
 - 컨트롤러 : 웹MVC의 컨트롤러 역할
     ex) API를 만들 때
 - 서비스 : 핵심 비즈니스 로직 구현
     ex) 회원은 중복 가입이 안된다 라는 조건
 - 리포지토리 : 데이터베이스에 접근, 도메인 객체를 DV에 저장하고 관리
     ex) 
 - 도메인 : 비즈니스 도메인 객체
     ex) 회원, 주문, 쿠폰 등등 주로 데이터베이스에 저장하고 관리됨

# 클래스 의존관계
 - MemberRepository는 interface로 만듦
    : 아직 데이터 저장소가 선정되지 않았다는 가상의 시나리오가 있기 때문에
 - 구현체를 Memory MemberRepository로 만들 것임
    : 가벼운 메모리 기반의 데이터 저장소 사용
    : 나중에 RDB등 구체적인 기술이 선정이 되고 나면 바꿔끼울 것임 -> 그래서 interface로 정의
 

> 회원관리 예제 - 백엔드 개발 - 회원 도메인과 리포지토리 만들기

- domain 패키지 생성
- 그 아래 Member 클래스 생성
- 요구사항의 데이터 Long id; 와 String name; 생성
  Long id;  : 데이터를 구분하기 위해 시스템이 부여하는 값
  String name;  : 회원가입 시 고객이 입력하는 값
- 각 데이터의 getter&setter 생성

- 회원 객체를 저장하는 저장소를 만듦
- repository 패키지 생성
- MemberRepository 인터페이스 생성
- 요구사항의 기능 save(저장), findById(Id 찾기), findByName(이름 찾기), findAll(저장된 모든 회원 리스트 반환) 생성

- 구현체 만듦
- MemoryMemberRepository 클래스 생성
- 인터페이스 MemberRepository를 implements
- 모든 메서드 Override
- save를 할 때 메모리이기 때문에 어딘가에 저장을 해놔야 함
  : Map을 사용
- Map<Long(키), Member(값)> store = new HashMap<>();
- long sequence = 0L;
   : 0, 1, 2 등 키 값을 생성해줌












